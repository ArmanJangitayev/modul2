"""Создайте клиентское приложение на Python, которое отправляет GET-запрос к серверу и выводит содержимое ответа в консоль. Также обработайте возможные ошибки.

Условие:

Создайте Python-приложение для отправки GET-запроса к серверу.
Введите URL сервера, к которому будет направлен запрос.
Отправьте GET-запрос к указанному URL.
Получите ответ от сервера.
Если ответ получен успешно (статус код 200), выведите содержимое ответа в консоль.
Если произошла ошибка (например, сервер не найден, ошибка сети или другие проблемы), выведите сообщение об ошибке в консоль.
Обработайте исключения, которые могут возникнуть при отправке запроса.
В случае успешного запроса, учтите возможность, что содержимое ответа может быть текстом, HTML, JSON или другим форматом.
Реализуйте код так, чтобы он был гибким и мог работать с разными URL.
Результат:

Клиентское приложение на Python, которое отправляет GET-запрос к серверу и выводит содержимое ответа в консоль, или сообщение об ошибке в случае возникновения проблем.
Вы можете использовать библиотеку requests для упрощения отправки GET-запросов в Python."""
import requests


def send_get_request(url):
    try:
        # Отправляем GET-запрос к указанному URL
        response = requests.get(url)

        # Проверяем статус-код ответа
        if response.status_code == 200:
            # Выводим содержимое ответа в консоль
            print("Response Content:")
            print(response.text)
            print("Response Status:", response.status_code)
        else:
            # Выводим сообщение об ошибке в случае неправильного статуса
            print(f"Error: {response.status_code} - {response.text}")

    except requests.RequestException as e:
        # Обрабатываем ошибки при отправке запроса
        print(f"Error: {e}")


if __name__ == "__main__":
    # Введите URL сервера
    server_url = input("Enter the server URL: ")

    # Отправляем GET-запрос
    send_get_request(server_url)
